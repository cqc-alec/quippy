@@grammar :: Quipper
@@whitespace :: /[^\S\n]*/

start::BCircuit = circuit:circuit subroutines:{subroutine newline} newline $ ;
circuit::Circuit =
    "Inputs: "inputs:arity newline
    gatelist:{gate newline}
    "Outputs: "outputs:arity
    ;
subroutine::Subroutine =
    newline
    "Subroutine: "name:string newline
    "Shape: "shape:string newline
    "Controllable: "controllable:("yes"|"no"|"classically") newline
    circuit:circuit ;

arity = @:",".{type_assignment}+ ;
type_assignment::TypeAssignment = number:int ":" type:("Qbit"|"Cbit") ;

control_app = controlled:(controlled | no_control) ;
controlled::Controlled = "with controls=[" ~ control:control "] with nocontrol" ;
no_control::NoControl = "with nocontrol" ;


gate
    =
    | qgate
    | qrot
    | gphase
    | cnot
    | cgate
    | cswap
    | qprep
    | qunprep
    | qinit
    | cinit
    | cterm
    | qmeas
    | qdiscard
    | cdiscard
    | dterm
    | subroutine_call
    | comment
    ;

qgate::QGate::Gate = "QGate[" ~ name:string "]" inverse:["*"] "(" qubit:int ")" > control_app;
qrot::QRot::Gate = "QRot[" ~ string "," double "](" int ")" ;
gphase::GPhase = "Gphase() with t=" ~ timestep:double >control_app "with anchors=[" ~ wires:",".{wire} "]" ;
cnot::CNot = "CNot(" ~ wire:wire ")" >control_app ;
cgate::CGate = "CGate[" ~ name:string "]" inverse:["*"] "(" wires:",".{wire} ")" no_control;
cswap::CSwap = "CSwap(" ~ wire1:wire "," wire2:wire ")" >control_app ;
qprep::QPrep = "QPrep(" ~ wire:wire ")" no_control ;
qunprep::QUnprep = "QUnprep(" ~ wire:wire ")" no_control ;
qinit::QInit = state:("QInit0" | "QInit1") ~ "(" wire:wire ")" no_control;
cinit::CInit = state:("CInit0" | "CInit1") ~ "(" wire:wire ")" no_control;
qterm::QTerm = state:("QTerm0" | "QTerm1") ~ "(" wire:wire ")" no_control;
cterm::CTerm = state:("CTerm0" | "CTerm1") ~ "(" wire:wire ")" no_control;
qmeas::QMeas = "QMeas(" ~ wire:wire ")" ;
qdiscard::QDiscard = "QDiscard(" ~ wire:wire ")" ;
cdiscard::CDiscard = "CDiscard(" ~ wire:wire ")" ;
dterm::DTerm = state:("DTerm0" | "Dterm1") ~ "(" wire:wire ")" ;
subroutine_call::SubCall = "Subroutine" ~ ["(x" repetitions:int ")"]
    "[" name:string ", shape" shape:string "]"
    inverse:["*"]
    "(" inputs:",".{int}+ ")"
    "-> (" outputs:",".{int}+ ")"
    >control_app ;


comment::Comment = "Comment[" ~ text:string "](" wires:",".{wire}+ ")" ;
wire::Wire = qubit:int ":" text:string ;

control::Control
    =
    | direction:"-" qubit:int
    | direction:"+" qubit:int
    ;

string = '"'@:String_literal'"';
String_literal::str = /[^"]+/ ;
int::int = /\d+/ ;
double::float = /(-)?\d+\.\d+e(-)?\d\d/ ;
newline = /\n/ ;
